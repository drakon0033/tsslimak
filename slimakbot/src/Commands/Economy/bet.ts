import {
	MessageActionRow,
	MessageButton,
	MessageComponentInteraction,
	MessageEmbed,
	MessageReaction,
	User,
} from "discord.js";
import { userModel } from "../../db/models/userModel";
import { logger } from "../../logger";
import { COMMAND, config, maps, util } from "../../struct";

const cmd: COMMAND = {
	name: "bet",
	cooldown: 2,
	aliases: ["—Å—Ç–∞–≤–∫–∞"],
	example: ["bet 10"],
	helpInfo: "–•–æ—Ç–∏—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ—Å–∫–æ–ª–∫–∏? –í—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å",
	category: "Economy",
	permission: "User",
	advancedInfo: "–•–æ—Ç–∏—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ—Å–∫–æ–ª–∫–∏? –í—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å. –°—Ç–∞–≤–∫–∞ –Ω–µ –º–µ–Ω—å—à–µ 10 –æ—Å–∫–æ–ª–∫–æ–≤",
	run: async (Client, message, args) => {
		let user = await userModel.findOne({
			uid: message.author.id,
		})!;

		if (maps.userInBet.has(message.author.id) || maps.userInDuel.has(message.author.id)) {
			return util.errorMessage(message, {
				text: "–í–∞–º –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç–∞–≤–∫—É –∏–ª–∏ –¥—É—ç–ª—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
				reply: true,
			});
		}

		const betAmount = args[0] === "all" || args[0] === "–≤—Å–µ" ? user?.shards : Number(args[0]);

		if (!betAmount || betAmount < 10) {
			return util.errorMessage(message, {
				text: "–í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª-–≤–æ –æ—Å–∫–æ–ª–∫–æ–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏",
				reply: true,
				example: true,
				cmd,
			});
		}

		if (user?.shards! < betAmount) {
			return util.errorMessage(message, {
				text: "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–∫–æ–ª–∫–æ–≤ –Ω–∞ —Å—á–µ—Ç—É",
				reply: true,
			});
		}

		const emojis = ["üåë", "üåï"];
		const botChoice = emojis[Math.floor(Math.random() * emojis.length)];
		const rnd = util.randomInt(0, 100);

		const embed = new MessageEmbed()
			.setAuthor(
				`–°—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message.author.username}`,
				message.author.displayAvatarURL({ size: 2048, dynamic: true })
			)
			.setDescription(
				`–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª \`${betAmount}\` ${config.emojis.SHARDS}.\n\n–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–µ–∂–¥—É \\üåë –∏ \\üåï\n–í—ã–∏–≥—Ä–∞–µ—à—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–µ—à—å - —Ä–µ—à–∏—Ç —Ç–≤–æ—è —É–¥–∞—á–∞.`
			)
			.setColor(message.member!.displayColor)
			.setThumbnail("https://i.imgur.com/Q4TJc4U.png")
			.setFooter(`–£ —Ç–µ–±—è –µ—Å—Ç—å –≤—Å–µ–≥–æ 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä!`);
		const loseEmbed = new MessageEmbed()
			.setAuthor(`–ü—Ä–æ–∏–≥—Ä—ã—à!`)
			.setColor("RED")
			.setFooter(`–ï—Å–ª–∏ —Ä–∞–Ω–¥–æ–º –≤—ã–¥–∞–ª –±–æ–ª—å—à–µ 85 - —Ç–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –¶–∏—Ñ—Ä–∞: ${rnd}.`)
			.setThumbnail("https://i.imgur.com/yIuXU6b.png");
		const winEmbed = new MessageEmbed()
			.setAuthor(`–ü–æ–±–µ–¥–∞!`)
			.setColor("GREEN")
			.setThumbnail("https://i.imgur.com/Zm5ZYRC.png");

		await userModel.updateOne(
			{
				uid: message.author.id,
			},
			{
				$inc: {
					shards: -betAmount,
				},
			}
		);

		maps.userInBet.set(message.author.id, undefined);
		user = await userModel.findOne({
			uid: message.author.id,
		});

		const selectButtons = new MessageActionRow().addComponents([
			new MessageButton().setCustomId("üåë").setLabel("üåë").setStyle("SECONDARY"),
			new MessageButton().setCustomId("üåï").setLabel("üåï").setStyle("SECONDARY"),
		]);

		const msg = await message.channel.send({
			content: message.author.toString(),
			embeds: [embed],
			components: [selectButtons],
		});

		const filter = (interaction: MessageComponentInteraction) => {
			if (interaction.user.id != message.author.id) {
				interaction.reply({ content: "–í—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É :)", ephemeral: true });
				return false;
			}

			return emojis.includes(interaction.customId) && interaction.isButton();
		};

		const collector = msg.createMessageComponentCollector({ filter, time: 60000 });

		collector.on("collect", async interaction => {
			if (rnd < 86 && interaction.customId === botChoice) {
				maps.userInBet.delete(message.author.id);

				await userModel.updateOne(
					{
						uid: message.author.id,
					},
					{
						$inc: {
							shards: betAmount * 2,
						},
					}
				);

				logger.message(`${message.author.username} –≤—ã–∏–≥—Ä–∞–ª ${betAmount} –≤ —Å—Ç–∞–≤–∫–µ.`);

				interaction.update({
					content: message.member!.toString(),
					components: [],
					embeds: [
						winEmbed.setDescription(
							`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–±–µ–¥–æ–π! –¢—ã –∑–∞–±–∏—Ä–∞–µ—à—å **\`${betAmount}\`** –∫ —Å–µ–±–µ –Ω–∞ —Å—á—ë—Ç.\n\n–¢–≤–æ–π –≤—ã–±–æ—Ä: \\${
								interaction.customId
							}, –Ω–æ–≤—ã–π —Å—á—ë—Ç: **\`${user!.shards! + betAmount * 2}\`** ${
								config.emojis.SHARDS
							}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä: \\${botChoice}.`
						),
					],
				});

				collector.stop();
			} else {
				maps.userInBet.delete(message.author.id);
				logger.message(`${message.author.username} –ø—Ä–æ–∏–≥—Ä–∞–ª ${betAmount} –≤ —Å—Ç–∞–≤–∫–µ.`);

				interaction.update({
					content: message.member!.toString(),
					components: [],
					embeds: [
						loseEmbed.setDescription(
							`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª —Å–≤–æ—é —Å—Ç–∞–≤–∫—É.\n\n–¢—ã —Å—Ç–∞–≤–∏–ª: **\`${betAmount}\`** –∏ –≤—ã–±—Ä–∞–ª \\${
								interaction.customId
							}, –Ω–æ–≤—ã–π —Å—á—ë—Ç: **\`${user!.shards!}\`** ${
								config.emojis.SHARDS
							}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –±—ã–ª: \\${botChoice}.`
						),
					],
				});

				collector.stop();
			}
		});

		collector.on("end", async end => {
			if (!maps.userInBet.has(message.author.id)) return;
			await userModel.updateOne(
				{
					uid: message.author.id,
				},
				{
					$inc: {
						shards: betAmount,
					},
				}
			);
			maps.userInBet.delete(message.author.id);
		});
	},
};

export default cmd;
