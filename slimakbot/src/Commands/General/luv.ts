import { GuildMember, Message, MessageEmbed, MessageReaction, Snowflake, User } from "discord.js";
import { userModel } from "../../db/models/userModel";
import { COMMAND, config, util } from "../../struct";

const cmd: COMMAND = {
	name: "luv",
	cooldown: 2,
	aliases: ["–ø–∞—Ä–∞"],
	example: ["luv @mention", "luv userID"],
	helpInfo: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º",
	category: "General",
	permission: "User",
	advancedInfo: `–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –°—Ç–æ–∏–º–æ—Å—Ç—å \`250\` ${config.emojis.SHARDS} –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω`,
	run: async (Client, message, args) => {
		const member = await util.getDiscordMember(message, {
			uid: args[0] as Snowflake,
		});

		if (member!.id === message.author.id || member!.user.bot) {
			return util.errorMessage(message, {
				text: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–∞–º–∏ —Å —Å–æ–±–æ–π, –ª–∏–±–æ —Å –±–æ—Ç–æ–º",
				reply: true,
			});
		}

		if (
			member!.roles.cache.has(config.ids.roleIds.luvRole) ||
			message.member?.roles.cache.has(config.ids.roleIds.luvRole)
		) {
			return util.errorMessage(message, {
				text: "–£ –≤–∞—Å, –∏–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞",
				reply: true,
			});
		}

		const userData = await userModel.findOne({
			uid: message.author.id,
		});
		const targData = await userModel.findOne({
			uid: member!.id,
		});

		if (userData?.shards! < 250 || targData?.shards! < 250) {
			return util.errorMessage(message, {
				text: "–£ —Ç–µ–±—è, –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å—Ç–∞—Ç—å –ø–∞—Ä–æ–π, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–∫–æ–ª–∫–æ–≤",
				reply: true,
			});
		}

		const additionalText = `–ß—Ç–æ –±—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ ‚ô•, –¥–ª—è –æ—Ç–∫–∞–∑–∞ –Ω–∞ üíî`;

		const luvAsk = new MessageEmbed()
			.setAuthor(
				message.author.tag,
				message.author.displayAvatarURL({ size: 2048, dynamic: true })
			)
			.setColor(message.member?.displayColor!)
			.setDescription(
				`–£—á–∞—Å—Ç–Ω–∏–∫: ${message.author.toString()} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å—Ç–∞—Ç—å –ø–∞—Ä–æ–π!\n${additionalText}`
			);

		const emojis = ["‚ô•", "üíî"];

		let sendedMsg: Message;
		const skyNet = util.getTextChannel(config.ids.channelIds.SkyNet, message.guild!);

		try {
			sendedMsg = await member!.send({ embeds: [luvAsk] });
			message.channel.send(`${message.author.toString()}, –ë—É–¥–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞..`);
		} catch (error) {
			util.DiscordErrorHandler(error, {
				cmd,
				message,
			});
			sendedMsg = await skyNet.send({ content: member!.toString(), embeds: [luvAsk] });
		}

		for (const emoji of emojis) {
			await sendedMsg.react(emoji);
		}

		const filter = (reaction: MessageReaction, user: User) => {
			return emojis.includes(reaction.emoji.name!) && user.id === member!.id;
		};

		sendedMsg
			.awaitReactions({ filter, max: 1, time: 3600000, errors: ["time"] })
			.then(async collected => {
				const reaction = collected.first();

				switch (reaction?.emoji.name) {
					case "‚ô•":
						const luvAccepted = new MessageEmbed()
							.setAuthor(
								Client.user?.username!,
								Client.user?.displayAvatarURL({
									size: 2048,
									dynamic: true,
								})
							)
							.setDescription(
								`–ü–æ–∑–¥—Ä–∞–≤–∏–º –Ω–æ–≤—É—é –ø–∞—Ä–æ—á–∫—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!\n\n${message.author.toString()} ‚ù§ ${member!.toString()}`
							)
							.setColor(message.member?.displayColor!)
							.setThumbnail("https://i.imgur.com/LJW4XH6.png");
						const generalChat = util.getTextChannel(
							config.ids.channelIds.GeneralChat,
							message.guild!
						);

						generalChat
							.send({
								content: `${message.author.toString()}, ${member!.toString()}`,
								embeds: [luvAccepted],
							})
							.then(m => {
								m.react("üéâ");
							});

						message.member?.roles.add(config.ids.roleIds.luvRole);
						member!.roles.add(config.ids.roleIds.luvRole);

						await userModel.updateOne(
							{
								uid: message.member?.id,
							},
							{
								luv: member?.id,
							}
						);

						await userModel.updateOne(
							{
								uid: member?.id,
							},
							{
								luv: message.member?.id,
							}
						);

						withdrawShards(message.member!, member!);
						break;
					case "üíî":
						const luvCancelled = new MessageEmbed()
							.setAuthor(
								Client.user?.username!,
								Client.user?.displayAvatarURL({
									size: 2048,
									dynamic: true,
								})
							)
							.setColor(message.member?.displayColor!)
							.setDescription(
								`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é ${member!.toString()} –Ω–µ –ø—Ä–∏–Ω—è–ª(–∞) –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã—Ç—å –ø–∞—Ä–æ–π. –ú–æ–∂–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?`
							);
						try {
							await message.author.send({ embeds: [luvCancelled] });
						} catch (error) {
							util.DiscordErrorHandler(error, {
								cmd,
								message,
							});
							skyNet.send({
								content: message.author.toString(),
								embeds: [luvCancelled],
							});
						}
						break;
				}
			})
			.catch(error => {
				sendedMsg.channel.send(`–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤—ã—à–ª–æ.`);
			});
	},
};

async function withdrawShards(frst: GuildMember, scnd: GuildMember) {
	await userModel.updateOne(
		{
			uid: frst.id,
		},
		{
			$inc: {
				shards: -250,
			},
		}
	);

	await userModel.updateOne(
		{
			uid: scnd.id,
		},
		{
			$inc: {
				shards: -250,
			},
		}
	);
}

export default cmd;
