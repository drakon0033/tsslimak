import {
	Message,
	MessageEmbed,
	MessageActionRow,
	MessageButton,
	MessageComponentInteraction,
} from "discord.js";
import { stripIndent } from "common-tags";
import { COMMAND, config, maps, util } from "../../struct";

type CommandMap = { [category: string]: COMMAND[] };
type AllData = { category: string; commands: COMMAND[] }[];

const command: COMMAND = {
	name: "help",
	category: "General",
	helpInfo: "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –¥—Ä—É–≥–∏–º –∫–æ–º–∞–Ω–¥–∞–º",
	aliases: ["–ø–æ–º–æ—â—å"],
	permission: "User",
	cooldown: 2,
	example: ["help"],
	run: async (Client, message, args) => {
		message.delete();

		if (args[0]) {
			return message.channel.send({
				content: message.author.toString(),
				embeds: [getCmd(args[0], message)],
			});
		} else {
			const itemsPerPage = 1;
			let page = 1;

			const data: CommandMap = {};
			for (const command of maps.commands.values()) {
				const { category } = command;
				if (data[category]) {
					data[category].push(command);
				} else {
					data[category] = [command];
				}
			}

			let allCommands = Object.entries(data).map(([category, commands]) => ({
				category,
				commands,
			}));
			let filterOptions;

			if (message.author.id === config.ids.userIds.OWNER_ID) {
			} else if (
				message.member?.roles.cache.some(role =>
					config.ids.roleIds.AdminRoles.includes(role.id)
				)
			) {
				filterOptions = cmd => cmd.permission != "Dev";
			} else if (
				message.member?.roles.cache.some(role =>
					config.ids.roleIds.ModeratorRoles.includes(role.id)
				)
			) {
				filterOptions = cmd => ["User", "Moderator"].includes(cmd.permission);
			} else {
				filterOptions = cmd => cmd.permission === "User";
			}

			if (filterOptions) {
				for (const [index, element] of allCommands.entries()) {
					allCommands[index].commands = element.commands.filter(filterOptions);
				}
			}

			allCommands = allCommands.filter(el => el.commands.length);

			const maxPages = Math.ceil(allCommands.length / itemsPerPage);

			const navButtons = new MessageActionRow().addComponents([
				new MessageButton()
					.setCustomId("left")
					.setStyle("PRIMARY")
					.setLabel(" ")
					.setEmoji(config.emojis.LEFTEmoji),
				new MessageButton()
					.setCustomId("stop")
					.setStyle("DANGER")
					.setLabel(" ")
					.setEmoji(config.emojis.CROSS),
				new MessageButton()
					.setCustomId("right")
					.setLabel(" ")
					.setStyle("PRIMARY")
					.setEmoji(config.emojis.RIGHTEmoji),
			]);
			const menuButtons = new MessageActionRow().addComponents([
				new MessageButton()
					.setCustomId("list")
					.setLabel(" ")
					.setEmoji(config.emojis.ListEmoji)
					.setStyle("SUCCESS"),
				new MessageButton()
					.setCustomId("info")
					.setLabel(" ")
					.setEmoji(config.emojis.InfoEmoji)
					.setStyle("SUCCESS"),
				new MessageButton()
					.setLabel(" ")
					.setCustomId("stop")
					.setStyle("DANGER")
					.setEmoji(config.emojis.CROSS),
			]);

			const embed = new MessageEmbed().setTimestamp();
			const msg = await message.channel.send({
				content: message.author.toString(),
				embeds: [
					embed
						.setDescription(
							`–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏ –Ω–∞ ${config.emojis.ListEmoji}.\n–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá\n
		${config.emojis.LEFTEmoji} **-** –ü—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –Ω–∞–∑–∞–¥.
		${config.emojis.RIGHTEmoji} **-** –ü—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –≤–ø–µ—Ä—ë–¥.
		\n–ù–∞–∂–º–∏ –Ω–∞ ${config.emojis.InfoEmoji} —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–ù–∞–∂–º–∏ –Ω–∞ ${config.emojis.CROSS} —á—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.`
						)
						.setColor(message.member!.displayColor),
				],
				components: [menuButtons],
			});

			const filter = (interaction: MessageComponentInteraction) => {
				if (interaction.user.id != message.author.id) {
					interaction.reply({
						content:
							"–í—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏! ",
						ephemeral: true,
					});

					return false;
				}

				return (
					["left", "stop", "right", "info", "list"].includes(interaction.customId) &&
					interaction.isButton()
				);
			};

			const collector = msg.createMessageComponentCollector({ filter, time: 600000 });

			collector.on("collect", async interaction => {
				if (!interaction.isButton()) return;

				if (interaction.customId === "stop") {
					collector.stop();
				}
				if (interaction.customId === "info") {
					await interaction.update({
						embeds: [
							embed.setDescription(`–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ:\n\`${config.guildSettings.PREFIX}help –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\`.
							\n–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: \`${config.guildSettings.PREFIX}\`
							\n${config.emojis.InfoEmoji} –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è - —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`),
						],
					});
				}
				if (interaction.customId === "list") {
					const entry = pages(allCommands, itemsPerPage, page, maxPages)![0];

					embed.setAuthor(
						`${page}/${maxPages} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${entry.category}`,
						message.guild?.iconURL({
							size: 2048,
							dynamic: true,
						})!
					);
					embed.setDescription(
						entry.commands
							.map(
								cmd =>
									`**${config.guildSettings.PREFIX}${cmd.name}** - ${cmd.helpInfo}`
							)
							.join("\n")
					);
					embed.setFooter(`!help <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã> —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–µ–π.`);
					await interaction.update({
						content: message.author.toString(),
						embeds: [embed],
						components: [navButtons],
					});
				}
				if (interaction.customId === "right") {
					page++;
					if (page > maxPages) {
						page--;
						return interaction.reply({
							content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ª–∏—Å—Ç–∞—Ç—å. –°—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!`,
							ephemeral: true,
						});
					}
					const entry = pages(allCommands, itemsPerPage, page, maxPages)![0];

					embed.setAuthor(
						`${page}/${maxPages} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${entry.category}`,
						message.guild?.iconURL({
							size: 2048,
							dynamic: true,
						})!
					);
					embed.setDescription(
						entry.commands
							.map(
								cmd =>
									`**${config.guildSettings.PREFIX}${cmd.name}** - ${cmd.helpInfo}`
							)
							.join("\n")
					);
					embed.setFooter(`!help <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã> —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–µ–π.`);
					await interaction.update({
						content: message.author.toString(),
						embeds: [embed],
					});
				}
				if (interaction.customId === "left") {
					page--;
					if (page < 1) {
						page = 1;
						return interaction.reply({
							content: `–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ª–∏—Å—Ç–∞—Ç—å. –°—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!`,
							ephemeral: true,
						});
					}

					const entry = pages(allCommands, itemsPerPage, page, maxPages)![0];
					embed.setAuthor(
						`${page}/${maxPages} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${entry.category}`,
						message.guild?.iconURL({
							size: 2048,
							dynamic: true,
						})!
					);
					embed.setDescription(
						entry.commands
							.map(
								cmd =>
									`**${config.guildSettings.PREFIX}${cmd.name}** - ${cmd.helpInfo}`
							)
							.join("\n")
					);
					embed.setFooter(`!help <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã> —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–µ–π.`);
					await interaction.update({
						content: message.author.toString(),
						embeds: [embed],
					});
				}
			});

			collector.on("end", async collected => {
				await msg.delete();
			});
		}
	},
};

function getCmd(name: string, message: Message) {
	const embed = new MessageEmbed()
		.setAuthor(
			message.author.username,
			message.author.displayAvatarURL({ size: 2048, dynamic: true })
		)
		.setColor(message.member?.displayColor!);

	let command =
		maps.commands.get(name) ||
		maps.commands
			.filter(command => command.aliases != undefined)
			.find(command => command.aliases!.includes(name));
	if (!command) {
		return embed.setDescription(`–ö–æ–º–∞–Ω–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \`${name}\` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
	} else {
		const alis = command.aliases ? command.aliases.join(", ") : "`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`";
		const info = stripIndent`**–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:** \`${command.name}\`
        **–°–ø–∏—Å–æ–∫ –∞–ª–∏–∞—Å–æ–≤:** \`${alis}\`
        **–û–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–ø. –∏–Ω—Ñ–∞:**\n${
			command.advancedInfo ? command.advancedInfo : command.helpInfo
		}
        **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n${util.cmdExampleToString(command.example, true)}`;
		return embed.setDescription(info);
	}
}

function pages(arr: AllData, itemsPerPage: number, page: number, maxPages: number) {
	if (page < 1 || page > maxPages) return null;
	return arr.slice((page - 1) * itemsPerPage, page * itemsPerPage);
}

export default command;
