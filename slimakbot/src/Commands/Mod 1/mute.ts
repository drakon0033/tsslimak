import { Client, Message, MessageEmbed, Snowflake } from "discord.js";
import { guildSettings } from "../../db/models/guildSettings";
import { UnixesTimes } from "../../db/models/unixesTimes";
import { COMMAND, util } from "../../struct";

const cmd: COMMAND = {
	name: "mute",
	cooldown: 2,
	aliases: ["–º—É—Ç"],
	example: ["mute @mention 1d –¥—É—Ä–∞—á–µ–∫", "mute userID 999d toxic KID :)(:"],
	helpInfo: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º—É—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
	category: "Mod 1",
	permission: "Moderator",
	advancedInfo: "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 10d/–¥, 10h/—á, 10m/–º, 10s/—Å",
	run: async (Client, message, args) => {
		const target = await util.getDiscordMember(message, {
			uid: args[0] as Snowflake,
			returnNothing: true,
		});

		if (!target) {
			return util.errorMessage(message, {
				text: "–í–∞–º –Ω—É–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ ID",
				reply: true,
			});
		}

		const result = util.getTime(args, {
			shift: true,
		});

		let gSetts = await util.findOneOrCreate(
			guildSettings,
			{ gid: message.guild?.id },
			{ gid: message.guild?.id }
		);

		const muteRoleId = gSetts?.muteRole;
		const currentTime = new Date().getTime();
		if (muteRoleId) {
			if (target.roles.cache.has(muteRoleId!)) {
				return util.errorMessage(message, {
					text: "–£ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –º—É—Ç",
					reply: true,
				});
			}
		} else {
			await createMuteRole(message, Client);
			gSetts = await guildSettings.findOne({
				gid: message.guild?.id,
			});
		}

		if (result?.milliseconds! < currentTime) {
			return util.errorMessage(message, {
				text: "–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				reply: true,
				example: true,
				cmd,
			});
		}

		if (!result?.reason) {
			return util.errorMessage(message, {
				text: "–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –º—É—Ç–∞",
				reply: true,
				example: true,
				cmd,
			});
		}

		const muteEmbedText =
			`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.member?.toString()} –≤—ã–¥–∞–ª –≤–∞–º **–º—É—Ç**` +
			`\n**–ü—Ä–∏—á–∏–Ω–∞**: ${result.reason}` +
			`\n**–í—Ä–µ–º—è —Å–Ω—è—Ç–∏—è**: <t:${Math.floor(result.milliseconds! / 1000)}>`;
		const muteEmbed = new MessageEmbed()
			.setColor(message.member?.displayColor!)
			.setDescription(muteEmbedText)
			.setTimestamp(result.dateObj);

		target.roles.add(gSetts?.muteRole!);

		await UnixesTimes.create({
			uid: target.id,
			roleID: gSetts?.muteRole,
			removeTime: result.milliseconds,
		});

		message.channel.send({ content: target.toString(), embeds: [muteEmbed] });
	},
};

async function createMuteRole(message: Message, client: Client) {
	const gSettings = await guildSettings.findOne({
		gid: message.id,
	});
	const role = await message.guild?.roles.create({
		name: "MUTED ü§ê",
		color: "#030303",
		reason: `Mute role for ${client.user?.tag}`,
	});

	message.guild?.channels.cache.forEach(channel => {
		switch (channel.type) {
			case "GUILD_TEXT":
				channel.permissionOverwrites.edit(role!, {
					SEND_MESSAGES: false,
					ADD_REACTIONS: false,
				});
				break;
			case "GUILD_VOICE":
				if (![gSettings?.vLuvCat, gSettings?.vCat].includes(channel.parentId!)) {
					channel.permissionOverwrites.edit(role!, {
						SPEAK: false,
						STREAM: false,
					});
				}
				break;
		}
	});

	await guildSettings.updateOne(
		{ gid: message.guild?.id },
		{
			muteRole: role?.id,
		}
	);

	return;
}

export default cmd;
